// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const getAdminUser = `-- name: GetAdminUser :one
SELECT id, photo, username, password, no_hp, email, saldo, total_sampah, role, created_at FROM user WHERE username = "admin"
`

func (q *Queries) GetAdminUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getAdminUser)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Photo,
		&i.Username,
		&i.Password,
		&i.NoHp,
		&i.Email,
		&i.Saldo,
		&i.TotalSampah,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, photo, username, password, no_hp, email, saldo, total_sampah, role, created_at FROM user WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Photo,
		&i.Username,
		&i.Password,
		&i.NoHp,
		&i.Email,
		&i.Saldo,
		&i.TotalSampah,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO user (
  username, password
) VALUES (
  ?, ?
)
`

type RegisterUserParams struct {
	Username sql.NullString `json:"username"`
	Password sql.NullString `json:"password"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.db.ExecContext(ctx, registerUser, arg.Username, arg.Password)
	return err
}
