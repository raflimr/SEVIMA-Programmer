// Code generated by sqlc. DO NOT EDIT.
// source: pembelian.sql

package db

import (
	"context"
	"database/sql"
)

const createPembelian = `-- name: CreatePembelian :exec
INSERT INTO pembelian (
  nama_barang, harga_barang
) VALUES (
  ?, ?
)
`

type CreatePembelianParams struct {
	NamaBarang  sql.NullString `json:"nama_barang"`
	HargaBarang sql.NullInt32  `json:"harga_barang"`
}

func (q *Queries) CreatePembelian(ctx context.Context, arg CreatePembelianParams) error {
	_, err := q.db.ExecContext(ctx, createPembelian, arg.NamaBarang, arg.HargaBarang)
	return err
}

const getAllPembelian = `-- name: GetAllPembelian :many
SELECT id, user_id, nama_barang, harga_barang, status, created_at FROM pembelia
`

func (q *Queries) GetAllPembelian(ctx context.Context) ([]Pembelian, error) {
	rows, err := q.db.QueryContext(ctx, getAllPembelian)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pembelian
	for rows.Next() {
		var i Pembelian
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.NamaBarang,
			&i.HargaBarang,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
