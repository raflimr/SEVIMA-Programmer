// Code generated by sqlc. DO NOT EDIT.
// source: penjualan.sql

package db

import (
	"context"
	"database/sql"
)

const createPenjualan = `-- name: CreatePenjualan :exec
INSERT INTO penjualan (
  berat_sampah, jenis_sampah, harga_sampah, keuntungan
) VALUES (
  ?, ?,? ,?
)
`

type CreatePenjualanParams struct {
	BeratSampah sql.NullInt32  `json:"berat_sampah"`
	JenisSampah sql.NullString `json:"jenis_sampah"`
	HargaSampah sql.NullInt32  `json:"harga_sampah"`
	Keuntungan  sql.NullInt32  `json:"keuntungan"`
}

func (q *Queries) CreatePenjualan(ctx context.Context, arg CreatePenjualanParams) error {
	_, err := q.db.ExecContext(ctx, createPenjualan,
		arg.BeratSampah,
		arg.JenisSampah,
		arg.HargaSampah,
		arg.Keuntungan,
	)
	return err
}

const getAllPenjualan = `-- name: GetAllPenjualan :many
SELECT id, user_id, berat_sampah, jenis_sampah, harga_sampah, status, keuntungan, created_at FROM penjuala
`

func (q *Queries) GetAllPenjualan(ctx context.Context) ([]Penjualan, error) {
	rows, err := q.db.QueryContext(ctx, getAllPenjualan)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Penjualan
	for rows.Next() {
		var i Penjualan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BeratSampah,
			&i.JenisSampah,
			&i.HargaSampah,
			&i.Status,
			&i.Keuntungan,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
